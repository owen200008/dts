package com.utopia.data.transfer.model.code.entity.kafka;

import lombok.Data;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author owen.cai
 * @create_date 2021/10/21
 * @alter_author
 * @alter_date
 */
@Data
public class KafkaProperty {

    /**
     * 地址信息
     */
    private List<String> bootstrapServers = new ArrayList<>(Collections.singletonList("localhost:9092"));
    private final Ssl ssl = new Ssl();
    private final Security security = new Security();
    private final Map<String, String> properties = new HashMap<>();

    private final Consumer consumer = new Consumer();
    private final Producer producer = new Producer();

    /**
     *
     */
    private String serialization = "kryo";

    /**
     * topic
     */
    private String topic = "xxx-xxx-xxx";

    @Data
    public static class Consumer {

        /**
         * 单独配置
         */
        private List<String> bootstrapServers;
        private Ssl ssl;
        private Security security;
        private Map<String, String> properties;

        /**
         * What to do when there is no initial offset in Kafka or if the current offset no
         * longer exists on the server.
         */
        private String autoOffsetReset = "earliest";

        /**
         * Maximum amount of time the server blocks before answering the fetch request if
         * there isn't sufficient data to immediately satisfy the requirement given by
         * "fetch-min-size".
         */
        private Long fetchMaxWait = -1L;

        /**
         * Minimum amount of data the server should return for a fetch request.
         */
        private Long fetchMinSize = -1L;

        /**
         * Expected time between heartbeats to the consumer coordinator.
         */
        private Long heartbeatInterval = -1L;

        /**
         * Maximum number of records returned in a single call to poll().
         */
        private Integer maxPollRecords = -1;

    }

    @Data
    public static class Producer {

        /**
         * 单独配置
         */
        private List<String> bootstrapServers;
        private Ssl ssl;
        private Security security;
        private Map<String, String> properties;

        /**
         * Number of acknowledgments the producer requires the leader to have received
         * before considering a request complete.
         */
        private String acks = "1";

        /**
         * Default batch size. A small batch size will make batching less common and may
         * reduce throughput (a batch size of zero disables batching entirely).
         */
        private Long batchSize = 16384L;

        /**
         * Total memory size the producer can use to buffer records waiting to be sent to
         * the server.
         */
        private Long bufferMemory = 33554432L;

        /**
         * Compression type for all data generated by the producer.
         */
        private String compressionType = "";

        /**
         * When greater than zero, enables retrying of failed sends.
         */
        private Integer retries = 0;
    }

    @Data
    public static class Ssl {

        /**
         * Password of the private key in the key store file.
         */
        private String keyPassword = "";

        /**
         * Location of the key store file.
         */
        private String keyStoreLocation = "";

        /**
         * Store password for the key store file.
         */
        private String keyStorePassword = "";

        /**
         * Type of the key store.
         */
        private String keyStoreType = "";

        /**
         * Location of the trust store file.
         */
        private String trustStoreLocation = "";

        /**
         * Store password for the trust store file.
         */
        private String trustStorePassword = "";

        /**
         * Type of the trust store.
         */
        private String trustStoreType = "";

        /**
         * SSL protocol to use.
         */
        private String protocol = "";
    }

    @Data
    public static class Security {

        /**
         * Security protocol used to communicate with brokers.
         */
        private String protocol = "";
    }
}
